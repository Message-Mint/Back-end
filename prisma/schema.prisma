// Prisma Schema File
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  TRIAL
  BEGINNER
  PRO
  ENTERPRISE
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

enum InstanceEnvironment {
  DEVELOPMENT
  PRODUCTION
}

enum SessionStorageType {
  REDIS
  POSTGRESQL
  MONGODB
}

model User {
  id                    String            @id @default(uuid())
  username              String            @unique
  email                 String            @unique
  phone                 String            @unique
  password              String
  firstName             String
  lastName              String
  nickname              String?
  isActive              Boolean           @default(true)
  currentSubscription   SubscriptionTier  @default(TRIAL)
  registeredAt          DateTime          @default(now())
  lastLogin             DateTime?
  subscriptionStartDate DateTime          @default(now())
  subscriptionEndDate   DateTime?
  role                  UserRole          @default(CUSTOMER)
  emailVerification     UserVerification? @relation("EmailVerification")
  phoneVerification     UserVerification? @relation("PhoneVerification")
  instances             Instance[]

  @@index([username, email, phone])
  @@index([currentSubscription, subscriptionStartDate])
  @@map("users")
}

model UserVerification {
  id              BigInt   @id @default(autoincrement())
  code            String   @unique
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  expiresAt       DateTime @default(dbgenerated("NOW() + INTERVAL '24 hours'"))
  userEmail       User?    @relation("EmailVerification", fields: [userEmailId], references: [id], onDelete: Cascade)
  userEmailId     String?  @unique
  userPhone       User?    @relation("PhoneVerification", fields: [userPhoneId], references: [id], onDelete: Cascade)
  userPhoneId     String?  @unique

  @@index([code])
  @@map("user_verifications")
}

model Instance {
  id                 String              @id @unique @default(uuid())
  name               String              @unique
  businessName       String?
  businessWhatsAppNo String?
  businessCountry    String?
  isActive           Boolean             @default(false)
  environment        InstanceEnvironment
  sessionStorage     SessionStorageType
  createdAt          DateTime            @default(now())
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@index([name, isActive])
  @@map("instances")
}
